// Week-4
// Implement Dijkstra's algorithm to Compute The shortest path Through a network.
#include<stdio.h>

int main()
{
    int n, v, u, num, i, j, S[10], min, cost[10][10], dist[10], path[10];

    printf("\n Enter Vertices:");
    scanf("%d", &n);

    printf("\n Enter Adjacency Matrix: \n");
    for(i=1; i<=n; i++)
    {
        for(j=1; j<=n; j++)
            scanf("%d", &cost[i][j]);
    }

    for(i=1; i<=n; i++)
        for(j=1; j<=n; j++)
            if(i!=j && cost[i][j] == -1)
                cost[i][j] = 30000;

    printf("\n Enter Source Vertex:");
    scanf("%d", &v);

    for(i=1; i<=n; i++)
    {
        S[i]=0;
        path[i]=v;
        dist[i]=cost[v][i];
    }
    dist[v]=0;

    for(num=2; num<=n; num++)
    {
        min=30000;
        u=0;
        for(i=1; i<=n; i++)
        {
            if(S[i]!=1)
                if(min>dist[i])
                {
                    u=i; 
                    min=dist[i];
                }
        }
        S[u]=1;
        for(i=1; i<=n; i++)
        {
            if(S[i]!=1)
                if(dist[i] > (min+cost[u][i]))
                {
                    dist[i]=min+cost[u][i];
                    path[i]=u;
                }
        }
    }
    
    printf("\n");
    printf("\n Path Matrix \n");
    printf("distance\tnode\tpath");
    for(i=1; i<=n; i++)
    {
        printf("\n %d", dist[i]);
        printf("\t%d", i);
        j=i;
        printf(" <-%d", j);
        while(j!=v)
        {
            j=path[j];
            printf(" <-%d", j);
        }
    }

    return 0;
}
